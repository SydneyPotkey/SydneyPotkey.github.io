[
  {
    "objectID": "Blog.html",
    "href": "Blog.html",
    "title": "My Blog",
    "section": "",
    "text": "Lab 8\n\n\nWeb Scraping\n\n\n\nSydney Potkey\n\n\nJun 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 9\n\n\nGenerative Art\n\n\n\nSydney Potkey\n\n\nJun 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 7\n\n\nAPIs\n\n\n\nSydney Potkey\n\n\nJun 7, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 6\n\n\nWriting Functions\n\n\n\nSydney Potkey\n\n\nJun 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 2\n\n\nFixing Bad Graphics\n\n\n\nSydney Potkey\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 4\n\n\nInteractive Dashboard\n\n\n\nSydney Potkey\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 3\n\n\nStatic Quarto Dashboard\n\n\n\nSydney Potkey\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 1\n\n\nQuarto Intro\n\n\n\nSydney Potkey\n\n\nMay 4, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Posts/06_04_25_Lab7/index.html",
    "href": "Posts/06_04_25_Lab7/index.html",
    "title": "Lab 7",
    "section": "",
    "text": "Set up\n\nlibrary(tidyverse)\nlibrary(repurrrsive)\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tidyjson)\nlibrary(httr)\nlibrary(glue)\nlibrary(leaflet)\nlibrary(htmltools)\n\n\n\nQuestion 1\n\n# read in capital lat and long\ncapitals &lt;- read.table(\"https://people.sc.fsu.edu/~jburkardt/datasets/states/state_capitals_ll.txt\", col.names = c(\"State\", \"Lat\", \"Long\"))\n\n# read in capital names\ncapital_names &lt;- read.table(\"https://people.sc.fsu.edu/~jburkardt/datasets/states/state_capitals_name.txt\", col.names = c(\"State\", \"Capital\"))\n\n# merge df's\ncapitals &lt;- capitals |&gt;\n  left_join(capital_names, by = \"State\")\n\n\n# function for getting pass times\npass_times &lt;- function(capitals_df) {\n  \n  get_passes &lt;- function(state, capital, lat, lon) {\n    res &lt;- GET(\n      glue(\"https://api.g7vrd.co.uk/v1/satellite-passes/25544/{lat}/{lon}.json\"),\n      query = list(hours = 72, minelevation = 30)\n    )\n    \n    data &lt;- fromJSON(rawToChar(res$content))\n    \n    # get first 3 pass times\n    passes &lt;- data$passes %&gt;%\n      head(3)\n    \n    # create tibble \n    tibble(\n      State = state,\n      Capital = capital,\n      Latitude = lat,\n      Longitude = lon,\n      PassTime = ymd_hms(str_remove(as.character(passes$start), \"Z\")),\n      PassNumber = seq.int(nrow(passes))\n    )\n  }\n  \n  # apply function to capitals df\n  result &lt;- pmap_dfr(\n    list(capitals_df$State, capitals_df$Capital, capitals_df$Lat, capitals_df$Long),\n    get_passes\n  )\n  \n  return(result)\n}\n\n# create df\nISS_data &lt;- pass_times(capitals)\n\n# reorder df\nISS_data &lt;- ISS_data |&gt;\n  arrange(State, PassTime)\n\n#pivoting on pass times to create one row per capital\nISS_data = ISS_data |&gt; pivot_wider(names_from = PassNumber, values_from = PassTime, names_prefix = \"Pass\")\n\n\n\nQuestion 2 US State Capitols\n\nleaflet(data = capitals) |&gt;\n  addTiles() |&gt;\n  setView(lng = -98.5795, lat = 39.8283, zoom = 3) |&gt;\n  addMarkers(\n    lng = ~Long,\n    lat = ~Lat,\n    popup = ~paste0(Capital, \", \", State)\n  )\n\n\n\n\n\n\n\nQuestion 3 Icon\n\nicon &lt;- makeIcon(\n  iconUrl = \"https://cdn1.iconfinder.com/data/icons/space-butterscotch-vol-2/256/Orbital_Station-1024.png\",\n  iconWidth = 20,\n  iconHeight = 20\n)\n\n\nleaflet(data = capitals) |&gt;\n  addTiles() |&gt;\n  setView(lng = -98.5795, lat = 39.8283, zoom = 3) |&gt;\n  addMarkers(\n    lng = ~Long,\n    lat = ~Lat,\n    popup = ~paste0(Capital, \", \", State),\n    icon = icon\n  )\n\n\n\n\n\n\n\nQuestion 4\n\n#formatting popups and labels as HTML for line breaks\npopups &lt;- paste0(ISS_data$State, \", \", ISS_data$Capital, \"&lt;br&gt;\",\n                \"Next 3 Passes: &lt;br&gt;\",\n                ISS_data$Pass1, \" UTC\", \"&lt;br&gt;\",\n                   ISS_data$Pass2, \" UTC\",  \"&lt;br&gt;\",\n                   ISS_data$Pass3, \" UTC\") |&gt;\n  lapply(htmltools::HTML)\n\nlabels &lt;- paste0(ISS_data$State, \", \", ISS_data$Capital, \"&lt;br&gt;\",\n                \"Next Pass: &lt;br&gt;\",\n                ISS_data$Pass1, \" UTC\") |&gt;\n  lapply(htmltools::HTML)\n\nleaflet(data = ISS_data) |&gt;\n  addTiles() |&gt;\n  setView(lng = -98.5795, lat = 39.8283, zoom = 3) |&gt;\n  addMarkers(\n    lng = ~Longitude,\n    lat = ~Latitude,\n    label = ~labels,\n    popup = ~popups,\n    icon = icon\n  ) \n\n\n\n\n\n\n\nQuestion 5\n\neast_west &lt;- ISS_data |&gt;\n  arrange(Pass1)\n\nleaflet(data = ISS_data) |&gt;\n  addTiles() |&gt;\n  setView(lng = -98.5795, lat = 39.8283, zoom = 3) |&gt;\n  addMarkers(\n    lng = ~Longitude,\n    lat = ~Latitude,\n    label = ~labels,\n    popup = ~popups,\n    icon = icon\n  ) |&gt;\n  addPolylines(data = east_west, lat = ~Latitude,\n               lng = ~Longitude,\n               color = \"red\",\n               weight = 2)\n\n\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{potkey2025,\n  author = {Potkey, Sydney},\n  title = {Lab 7},\n  date = {2025-06-07},\n  url = {https://SydneyPotkey.github.io/Posts/06_04_25_Lab7/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nPotkey, Sydney. 2025. “Lab 7.” June 7, 2025. https://SydneyPotkey.github.io/Posts/06_04_25_Lab7/."
  },
  {
    "objectID": "Posts/06_04_25_Lab8/index.html",
    "href": "Posts/06_04_25_Lab8/index.html",
    "title": "Lab 8",
    "section": "",
    "text": "Goal: Scrape information from https://www.cheese.com to obtain a dataset of characteristics about different cheeses, and gain deeper insight into your coding process. 🪤\n\nPart 1: Locate and examine the robots.txt file for this website. Summarize what you learn from it.\n\nThe only lines on ‘https://www.cheese.com/robots.txt’ is User-agent: * and Sitemap: https://www.cheese.com/sitemap.xml .\n’User-agent: *’ informs us that anyone is allowed to scrape.\nThe lack of Crawl-delay, Visit-time and Request-rate means that we can scrape as often as we want, at any time of day, from as many different users as we want.\nThe lack of a ’Disallow” section means that there are no scraping restrictions on specific areas of the cheese website.\n\nPart 2: Learn about the html_attr() function from rvest. Describe how this function works with a small example.\n\nlibrary(rvest)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()         masks stats::filter()\n✖ readr::guess_encoding() masks rvest::guess_encoding()\n✖ dplyr::lag()            masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(purrr)\n\n\nThe html_attr() function obtains the value of an attribute. It is frequently used after html_elements on a website.\nBelow, html_elements(“a”) extracts all elements inside the  attribute. html_attr(“href”) extracts the value of href inside the  element. In this case the href is the link to the wikipedia article on cats.\nExample below can be found here.\n\n\nhtml &lt;- minimal_html(\"\n  &lt;p&gt;&lt;a href='https://en.wikipedia.org/wiki/Cat'&gt;cats&lt;/a&gt;&lt;/p&gt;\n  &lt;img src='https://cataas.com/cat' width='100' height='200'&gt;\n\")\n\nhtml %&gt;% \n  html_elements(\"a\") %&gt;% \n  html_attr(\"href\")\n\n[1] \"https://en.wikipedia.org/wiki/Cat\"\n\n\nPart 3: (Do this alongside Part 4 below.) I used ChatGPT to start the process of scraping cheese information with the following prompt:\n\nWrite R code using the rvest package that allows me to scrape cheese information from cheese.com.\n\nFully document your process of checking this code. Record any observations you make about where ChatGPT is useful / not useful.\n\n# Load required libraries\nlibrary(rvest)\nlibrary(dplyr)\n\n# Define the URL\nurl &lt;- \"https://www.cheese.com/alphabetical\"\n\n# Read the HTML content from the webpage\nwebpage &lt;- read_html(url)\n\n# Extract the cheese names and URLs\ncheese_data &lt;- webpage %&gt;%\n  html_nodes(\".cheese-item\") %&gt;%\n  html_nodes(\"a\") %&gt;%\n  html_attr(\"href\") %&gt;%\n  paste0(\"https://cheese.com\", .)\n\ncheese_names &lt;- webpage %&gt;%\n  html_nodes(\".cheese-item h3\") %&gt;%\n  html_text()\n\n# Create a data frame to store the results\ncheese_df &lt;- data.frame(Name = cheese_names,\n                        URL = cheese_data,\n                        stringsAsFactors = FALSE)\n\n# Print the data frame\nprint(cheese_df)\n\nPart 4: Obtain the following information for all cheeses in the database:\n\ncheese name\nURL for the cheese’s webpage (e.g., https://www.cheese.com/gouda/)\nwhether or not the cheese has a picture (e.g., gouda has a picture, but bianco does not).\n\nTo be kind to the website owners, please add a 1 second pause between page queries. (Note that you can view 100 cheeses at a time.)\n\nurl &lt;- \"https://www.cheese.com/alphabetical\"\n\nextract_cheese_data &lt;- function(url) {\n  Sys.sleep(1)  \n  page &lt;- read_html(url)\n\ncheese_names &lt;- page %&gt;%\n    html_elements(\"h3 a\") %&gt;%\n    html_text()\n\ncheese_urls &lt;- page %&gt;%\n  html_elements(\"h3 a\") %&gt;%\n  html_attr(\"href\") %&gt;%\n  paste0(\"https://www.cheese.com\", .)\n\ncheese_images &lt;- page %&gt;% \n  html_nodes(\".product-item img\") %&gt;% \n  html_attr(\"class\") %&gt;%\n  (\\(x) x == \"image-exists\")()\n\ntibble(\n    name = cheese_names,\n    url = cheese_urls,\n    image = cheese_images)\n}\n\n\nextract_cheese_data(url)\n\n# A tibble: 20 × 3\n   name                                url                                 image\n   &lt;chr&gt;                               &lt;chr&gt;                               &lt;lgl&gt;\n 1 \"2 Year Aged Cumin Gouda\"           https://www.cheese.com/2-year-aged… TRUE \n 2 \"3-Cheese Italian Blend\"            https://www.cheese.com/3-cheese-it… FALSE\n 3 \"30 Month Aged Parmigiano Reggiano\" https://www.cheese.com/30-month-ag… TRUE \n 4 \"3yrs Aged Vintage Gouda\"           https://www.cheese.com/3yrs-aged-v… TRUE \n 5 \"Aarewasser\"                        https://www.cheese.com/aarewasser/  TRUE \n 6 \"Abbaye de Belloc\"                  https://www.cheese.com/abbaye-de-b… TRUE \n 7 \"Abbaye de Belval\"                  https://www.cheese.com/abbaye-de-b… FALSE\n 8 \"Abbaye de Citeaux\"                 https://www.cheese.com/abbaye-de-c… TRUE \n 9 \"Abbaye de Tamié\"                   https://www.cheese.com/tamie/       TRUE \n10 \"Abbaye de Timadeuc\"                https://www.cheese.com/abbaye-de-t… TRUE \n11 \"Abbaye du Mont des Cats\"           https://www.cheese.com/abbaye-du-m… TRUE \n12 \"Abbot’s Gold\"                      https://www.cheese.com/abbots-gold/ FALSE\n13 \"Abertam\"                           https://www.cheese.com/abertam/     FALSE\n14 \"Abondance\"                         https://www.cheese.com/abondance/   TRUE \n15 \"Acapella\"                          https://www.cheese.com/acapella/    FALSE\n16 \"Accasciato \"                       https://www.cheese.com/accasciato/  FALSE\n17 \"Ackawi\"                            https://www.cheese.com/ackawi/      TRUE \n18 \"Acorn\"                             https://www.cheese.com/acorn/       FALSE\n19 \"Adelost\"                           https://www.cheese.com/adelost/     TRUE \n20 \"ADL Brick Cheese\"                  https://www.cheese.com/adl-brick-c… FALSE\n\ncheese_df &lt;- map_dfr(url, extract_cheese_data)\n\nPart 5: When you go to a particular cheese’s page (like gouda), you’ll see more detailed information about the cheese. For just 10 of the cheeses in the database, obtain the following detailed information:\n\nmilk information\ncountry of origin\nfamily\ntype\nflavour\n\n(Just 10 to avoid overtaxing the website! Continue adding a 1 second pause between page queries.)\nPart 6: Evaluate the code that you wrote in terms of efficiency. To what extent do your function(s) adhere to the principles for writing good functions? To what extent are your functions efficient? To what extent is your iteration of these functions efficient?\nEfficiency: To increase efficiency in our scrape_cheese function we initiated vectors to hold the elements of our final data set. We knew we would need these eventually so allocating vectors to them vectorizes our function. We also used function like across() in our get_cheese_info function to avoid writing a more complex function and ensuring that we get the same result each time the function runs.\nLimitations in Iteration: We did use a for loop in our scrape_cheese function to iterate through pages on the cheese website. For loops are not optimally efficient in R so reformatting the code to use a map function or apply function could further increase our efficiency.\nPrinciples of Writing Good Functions: We used the data.frame function in both functions that we wrote to ensure that output is of the same form each time the function runs. We also gave each element in our functions practical yet descriptive names that should tell anyone familiar with R what is happening in the body of our code and what the end goal should contain. Our functions are also self contained not relying on any information from outside the function.\n\n\n\nCitationBibTeX citation:@online{potkey2025,\n  author = {Potkey, Sydney},\n  title = {Lab 8},\n  date = {2025-06-07},\n  url = {https://SydneyPotkey.github.io/Posts/06_04_25_Lab8/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nPotkey, Sydney. 2025. “Lab 8.” June 7, 2025. https://SydneyPotkey.github.io/Posts/06_04_25_Lab8/."
  },
  {
    "objectID": "Posts/05_04_25_Lab3/index.html",
    "href": "Posts/05_04_25_Lab3/index.html",
    "title": "Lab 3",
    "section": "",
    "text": "CitationBibTeX citation:@online{potkey2025,\n  author = {Potkey, Sydney},\n  title = {Lab 3},\n  date = {2025-05-04},\n  url = {https://SydneyPotkey.github.io/Posts/05_04_25_Lab3/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nPotkey, Sydney. 2025. “Lab 3.” May 4, 2025. https://SydneyPotkey.github.io/Posts/05_04_25_Lab3/."
  },
  {
    "objectID": "Posts/05_04_25_Lab2/index.html",
    "href": "Posts/05_04_25_Lab2/index.html",
    "title": "Lab 2",
    "section": "",
    "text": "While there are certainly issues with this image, do your best to tell the story of this graph in words. That is, what is this graph telling you? What do you think the authors meant to convey with it?\n\nThis graph is attempting to compare the percent of people who believe vaccines are safe in various countries grouped by region. I think that the authors meant to convey the apprehension certain countries have pertaining to vaccines.\n\nList the variables that appear to be displayed in this visualization. Hint: Variables refer to columns in the data.\n\nThe variables evident in this graph are region (Americas, Asia, etc.), and percent of population who believe vaccines are safe.\n\nNow that you’re versed in the grammar of graphics (e.g., ggplot), list the aesthetics used and which variables are mapped to each.\n\nIt seems like the graph only uses an x axis variable, percent of population who believes vaccines are safe, and a grouping variable, region. The graph does not contai a y axis variable even though points are plotted at different heights.\n\nWhat type of graph would you call this? Meaning, what geom would you use to produce this plot?\n\nI would say this is a geom point.\n\nProvide at least four problems or changes that would improve this graph. Please format your changes as bullet points!\n\n\napply a relevant y axis variable or change the style of plot\nconnect the grid lines\nmove the region labels to somewhere where they are not crowding\nadd an x-axis label that tells the reader the numeric values are percents or add percent signs\n\n\n\n\n#splitting long string of words into seprate country names\ndata_dictionary &lt;- world_data |&gt;\n  filter(`Variable Name` == \"WP5\") |&gt;\n  mutate(code_list = str_split(`Variable Type & Codes*`, \",\")) |&gt;\n  select(code_list) |&gt;                      \n  unnest(code_list) |&gt;                       \n  mutate(code_list = str_trim(code_list)) |&gt; \n  separate(code_list, into = c(\"WP5\", \"country\"), sep = \"=\") |&gt;\n  mutate(WP5 = as.character(WP5))\n\n\n#ensuring character variable\nworld_data_full &lt;- world_data_full |&gt; \n  mutate(WP5 = as.character(WP5))\n\n  \n#joining by country \njoined_data &lt;- inner_join(world_data_full, data_dictionary, by = \"WP5\" )\n\njoined &lt;- joined_data |&gt;\n  select(country, Q25, Regions_Report)\n\n#creating regions for scatter plot \ngraph_data &lt;- joined |&gt; \n  mutate(region = case_when(Regions_Report %in% c(9, 10, 11, 12)~\"Asia\", Regions_Report %in% c(1, 2, 4, 5)~\"Sub-Saharan Africa\", Regions_Report %in% c(6, 7, 8)~\"Americas\", Regions_Report %in% c(14, 15, 16, 17)~\"Europe\", Regions_Report == 18~\"Australia & NZ\", Regions_Report %in% c(3, 13)~\"North Africa & Middle East\")) |&gt;\n  filter(!is.na(region)) |&gt;\n  group_by(country, region) |&gt; \n  summarise(total_respondents = n(),\n    agree = sum(Q25 == 1, na.rm = TRUE),\n    percent_agree = 100 * agree / total_respondents\n  ) |&gt; \n  arrange(desc(percent_agree)) \n\n#replicating process for proportion of those who studied science\nscience_percent &lt;- joined_data |&gt; \n  group_by(country) |&gt; \n  summarise(\n    total_respondents = n(),\n    studied_science = sum(Q5C == 1, na.rm = TRUE),\n    percent_studied_science = 100 * studied_science / total_respondents\n  ) |&gt; \n  arrange(desc(percent_studied_science))\n\n\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\n\nlibrary(scales)\nlibrary(ggiraph)\n\n\n#color pallete for graph\ncbp2 &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\",\n          \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n  \n\nplot &lt;- ggplot(graph_data,\n               aes(x = reorder(country, percent_agree),\n                   y = percent_agree / 100,\n                   fill = region,\n                   tooltip = country,\n                   data_id = country)) +\n  geom_col_interactive() +\n  facet_wrap(~ region, scales = \"free_x\",\n             labeller = label_wrap_gen(width = 15)) +\n  labs(\n    x = NULL,\n    y = \" \",\n    subtitle = \"Percent Who Believe Vaccines Are Safe\",\n    title = \"Belief in Vaccine Safety by Region\"\n  ) +\n  theme_light() +\n  scale_fill_manual(values = cbp2) +\n  scale_y_continuous(labels = label_percent()) +\n  theme(\n    axis.text.x = element_blank(),          \n    axis.ticks.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),    \n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\")\n  )\n\ngirafe(ggobj = plot)"
  },
  {
    "objectID": "Posts/05_04_25_Lab2/index.html#filtering-the-data",
    "href": "Posts/05_04_25_Lab2/index.html#filtering-the-data",
    "title": "Lab 2",
    "section": "",
    "text": "#splitting long string of words into seprate country names\ndata_dictionary &lt;- world_data |&gt;\n  filter(`Variable Name` == \"WP5\") |&gt;\n  mutate(code_list = str_split(`Variable Type & Codes*`, \",\")) |&gt;\n  select(code_list) |&gt;                      \n  unnest(code_list) |&gt;                       \n  mutate(code_list = str_trim(code_list)) |&gt; \n  separate(code_list, into = c(\"WP5\", \"country\"), sep = \"=\") |&gt;\n  mutate(WP5 = as.character(WP5))\n\n\n#ensuring character variable\nworld_data_full &lt;- world_data_full |&gt; \n  mutate(WP5 = as.character(WP5))\n\n  \n#joining by country \njoined_data &lt;- inner_join(world_data_full, data_dictionary, by = \"WP5\" )\n\njoined &lt;- joined_data |&gt;\n  select(country, Q25, Regions_Report)\n\n#creating regions for scatter plot \ngraph_data &lt;- joined |&gt; \n  mutate(region = case_when(Regions_Report %in% c(9, 10, 11, 12)~\"Asia\", Regions_Report %in% c(1, 2, 4, 5)~\"Sub-Saharan Africa\", Regions_Report %in% c(6, 7, 8)~\"Americas\", Regions_Report %in% c(14, 15, 16, 17)~\"Europe\", Regions_Report == 18~\"Australia & NZ\", Regions_Report %in% c(3, 13)~\"North Africa & Middle East\")) |&gt;\n  filter(!is.na(region)) |&gt;\n  group_by(country, region) |&gt; \n  summarise(total_respondents = n(),\n    agree = sum(Q25 == 1, na.rm = TRUE),\n    percent_agree = 100 * agree / total_respondents\n  ) |&gt; \n  arrange(desc(percent_agree)) \n\n#replicating process for proportion of those who studied science\nscience_percent &lt;- joined_data |&gt; \n  group_by(country) |&gt; \n  summarise(\n    total_respondents = n(),\n    studied_science = sum(Q5C == 1, na.rm = TRUE),\n    percent_studied_science = 100 * studied_science / total_respondents\n  ) |&gt; \n  arrange(desc(percent_studied_science))\n\n\nImprove the visualization above by either re-creating it with the issues you identified fixed OR by creating a new visualization that you believe tells the same story better.\n\n\nlibrary(scales)\nlibrary(ggiraph)\n\n\n#color pallete for graph\ncbp2 &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\",\n          \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n  \n\nplot &lt;- ggplot(graph_data,\n               aes(x = reorder(country, percent_agree),\n                   y = percent_agree / 100,\n                   fill = region,\n                   tooltip = country,\n                   data_id = country)) +\n  geom_col_interactive() +\n  facet_wrap(~ region, scales = \"free_x\",\n             labeller = label_wrap_gen(width = 15)) +\n  labs(\n    x = NULL,\n    y = \" \",\n    subtitle = \"Percent Who Believe Vaccines Are Safe\",\n    title = \"Belief in Vaccine Safety by Region\"\n  ) +\n  theme_light() +\n  scale_fill_manual(values = cbp2) +\n  scale_y_continuous(labels = label_percent()) +\n  theme(\n    axis.text.x = element_blank(),          \n    axis.ticks.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),    \n    legend.position = \"none\",\n    plot.title = element_text(face = \"bold\")\n  )\n\ngirafe(ggobj = plot)"
  },
  {
    "objectID": "Posts/05_04_25_Lab4/index.html",
    "href": "Posts/05_04_25_Lab4/index.html",
    "title": "Lab 4",
    "section": "",
    "text": "CitationBibTeX citation:@online{potkey2025,\n  author = {Potkey, Sydney},\n  title = {Lab 4},\n  date = {2025-05-04},\n  url = {https://SydneyPotkey.github.io/Posts/05_04_25_Lab4/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nPotkey, Sydney. 2025. “Lab 4.” May 4, 2025. https://SydneyPotkey.github.io/Posts/05_04_25_Lab4/."
  },
  {
    "objectID": "Posts/06_04_25_Lab6/index.html",
    "href": "Posts/06_04_25_Lab6/index.html",
    "title": "Lab 6",
    "section": "",
    "text": "Exercise 1: Write a function that removes outliers in a dataset. The user should be able to supply the dataset, the variables to remove outliers from, and a threshold on the number of SDs away from the mean used to define outliers. Hint 1: You will need to calculate a z-score to filter the values! Hint 2: You might want to consider specifying a default value (e.g., 3) for sd_thresh.\n\nlibrary(tidyverse)\nlibrary(purrr)\n\nremove_outliers &lt;- function(data, ..., sd_thresh = 3) {\n  vars &lt;- enquos(...)\n  \n  # get non numeric variables\n  non_numeric_var &lt;- data |&gt;\n    select(...) |&gt;\n    map_lgl(~ !is.numeric(.x)) |&gt;\n    keep(identity) |&gt;\n    names()\n  \n    if(length(non_numeric_var) &gt; 0) {\n      stop(\"non-numeric columns detected: \",\n           str_c(non_numeric_var, collapse = \", \"))\n    }\n  \n  data |&gt;\n    mutate(across(.cols = c(...),\n                  .fns = ~ (.x / mean(.x)) / sd(.x),\n                  .names = \"{.col}_scaled\")\n           ) |&gt;\n    filter(if_any(.cols = ends_with(\"scaled\"),\n                  .fns = ~ .x &lt; sd_thresh)) |&gt;\n    select(- ends_with(\"scaled\"))\n}\n\nwebsite I found helpful -&gt; https://rlang.r-lib.org/reference/enquo.html\n\n\n\n## Testing how your function handles multiple input variables\nremove_outliers(diamonds, \n                price, \n                x, \n                y, \n                z)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n## Testing how your function handles an input that isn't numeric\nremove_outliers(diamonds, \n                price, \n                color)\n\nError in remove_outliers(diamonds, price, color): non-numeric columns detected: color\n\n## Testing how your function handles a non-default sd_thresh\nremove_outliers(diamonds, \n                price,\n                x, \n                y, \n                z, \n                sd_thresh = 2)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "Posts/06_04_25_Lab6/index.html#testing-your-function",
    "href": "Posts/06_04_25_Lab6/index.html#testing-your-function",
    "title": "Lab 6",
    "section": "",
    "text": "## Testing how your function handles multiple input variables\nremove_outliers(diamonds, \n                price, \n                x, \n                y, \n                z)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n## Testing how your function handles an input that isn't numeric\nremove_outliers(diamonds, \n                price, \n                color)\n\nError in remove_outliers(diamonds, price, color): non-numeric columns detected: color\n\n## Testing how your function handles a non-default sd_thresh\nremove_outliers(diamonds, \n                price,\n                x, \n                y, \n                z, \n                sd_thresh = 2)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "Posts/06_04_25_Lab6/index.html#data-frame-functions",
    "href": "Posts/06_04_25_Lab6/index.html#data-frame-functions",
    "title": "Lab 6",
    "section": "Data Frame Functions",
    "text": "Data Frame Functions\nQuestion 5: Insert the data frame function you wrote from Lab 6 (either Exercise 1 or Exercise 2).\n\nremove_outliers &lt;- function(data, ..., sd_thresh = 3) {\n  vars &lt;- enquos(...)\n  \n  # check variable type\n  for (var in vars) {\n    col &lt;- eval_tidy(var, data)\n    if (!is.numeric(col)) {\n      return(NA)\n    }\n  }\n  \n  keep &lt;- rep(TRUE, nrow(data))\n  for (var in vars) {\n    col &lt;- eval_tidy(var, data)\n    z &lt;- (col - mean(col)) / sd(col)\n    keep &lt;- keep & abs(z) &lt;= sd_thresh\n  }\n  \n  return(data[keep, ])\n}\n\nFor Questions 6 - 10 you will write different functions which work with data similar to the nycflights13 data.\nQuestion 6: Write a filter_severe() function that finds all flights that were cancelled (i.e. is.na(arr_time)) or delayed by more than an hour.\n\nlibrary(nycflights13)\n\nfilter_severe &lt;- function(data){\n  severe_data &lt;- filter(is.na(arr_time) | arr_delay &gt; 60)\n}\n\nQuestion 7: Write a summarize_severe() function that counts the number of cancelled flights and the number of flights delayed by more than an hour.\n\nsummarize_severe &lt;- function(severe_data){\n  cancelled &lt;- sum(is.na(arr_time))\n  delayed &lt;- nrow(severe_data) - cancelled\n  \n  return(list(cancelled = cancelled, delayed = delayed))\n}\n\nQuestion 8: Modify your filter_severe() function to allow the user to supply the number of hours that should be used to filter the flights that were cancelled or delayed.\n\nsevere_modified &lt;- function(data, hours){\n  severe_data &lt;- filter(is.na(arr_time) | arr_delay &gt; hours)\n  \n}\n\nQuestion 9: Write a summarize_weather() function that summarizes the weather to compute the minimum, mean, and maximum, of a user supplied variable.\n\nsummarize_weather &lt;- function(var){\n  min &lt;- min(var)\n  mean &lt;- mean(var)\n  max &lt;- max(var)\n  \n  return(list(minimum = min, mean = mean, maximum = max))\n}\n\nQuestion 10: Write a standardize_time() function that converts the user supplied variable that uses clock time (e.g., dep_time, arr_time, etc.) into a decimal time (i.e. hours + (minutes / 60)).\n\nstandardize_time &lt;- function(time_var){\n  hours &lt;- time_var %/% 100\n  minutes &lt;- time_var %% 100\n  time &lt;- hours + (minutes / 60)\n    \n  return(time)\n}"
  },
  {
    "objectID": "Posts/06_04_25_Lab9/index.html",
    "href": "Posts/06_04_25_Lab9/index.html",
    "title": "Lab 9",
    "section": "",
    "text": "library(tidyverse)\nlibrary(scales)\nlibrary(ggcorrplot)\nlibrary(rayshader)\nlibrary(ambient)\nlibrary(ggthemes)\nlibrary(tictoc)"
  },
  {
    "objectID": "Posts/06_04_25_Lab9/index.html#color-pallette",
    "href": "Posts/06_04_25_Lab9/index.html#color-pallette",
    "title": "Lab 9",
    "section": "Color Pallette",
    "text": "Color Pallette\n\n# from coolors.com \npal &lt;- c(\"#FFBF69\", \"#FFFFFF\", \"#CBF3F0\")\n\n# generating gradient function\npalette_gen &lt;- colorRampPalette(pal)\n\n# checking gradient \nimage(x = matrix(1:100, ncol = 1), \n  col = palette_gen(100),\n  useRaster = TRUE,\n  axes = FALSE)"
  },
  {
    "objectID": "Posts/06_04_25_Lab9/index.html#using-ggcorrplot",
    "href": "Posts/06_04_25_Lab9/index.html#using-ggcorrplot",
    "title": "Lab 9",
    "section": "using ggcorrplot",
    "text": "using ggcorrplot\n\n#generate corr data\ngenerate_random_corr &lt;- function(n_vars = 20, seed = NULL) {\n  if (!is.null(seed)) set.seed(seed)\n  mat &lt;- matrix(rnorm(n_vars^2),\n                nrow = n_vars)\n  corr &lt;- cor(mat)\n  colnames(corr) &lt;- paste0(\"V\", 1:n_vars)\n  rownames(corr) &lt;- paste0(\"V\", 1:n_vars)\n  \n  return(corr)\n}\n\n\n\n# plot function\nstyled_corr_plot &lt;- function(pal, corr) {\n  ggcorrplot(corr,\n             type = \"lower\",\n             lab_size = 3,\n             method = \"circle\",\n             colors = pal,\n             ggtheme = theme_void(),\n             show.legend = FALSE) +\n    theme(axis.text.x = element_blank(),\n                             axis.text.y = element_blank(),\n                             axis.ticks = element_blank(),\n                             panel.grid = element_blank())\n  \n}\n\n#pal &lt;- palette_gen(45)\n\ncorr_dat &lt;- generate_random_corr(n_vars = 20, seed = 5)\n\nstyled_corr_plot(pal, corr_dat)"
  },
  {
    "objectID": "Posts/06_04_25_Lab9/index.html#using-geom_tile",
    "href": "Posts/06_04_25_Lab9/index.html#using-geom_tile",
    "title": "Lab 9",
    "section": "using geom_tile",
    "text": "using geom_tile\n\ncustom_corr_plot &lt;- function(corr, pal, alpha_range = c(0.2, 1)) {\n  corr_long &lt;- as.data.frame(corr) |&gt;\n    rownames_to_column(\"Var1\") |&gt;\n    pivot_longer(-Var1, names_to = \"Var2\",\n                 values_to = \"corr\")\n\n  # Plot\n  ggplot(corr_long,\n         aes(x = Var1,\n             y = Var2,\n             fill = corr,\n             alpha = abs(corr)),\n         show.legend = FALSE) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient2(low = pal[1],\n                         mid = pal[round(length(pal)/2)],\n                         high = pal[length(pal)], \n                         midpoint = 0) +\n    scale_alpha(range = alpha_range,\n                guide = \"none\") +\n    coord_fixed() +\n    theme_void() +\n    theme(axis.text.x = element_blank(),\n          axis.text.y = element_blank(),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank(),\n          legend.position = \"none\")\n}\n\npal &lt;- palette_gen(45)\ncorr_dat &lt;- generate_random_corr(n_vars = 20, seed = 5)\n\ncustom_corr_plot(corr_dat, pal)\n\n\n\n\n\n\n\n\nArtistic Description: Both of these generative pieces walk the line between nature and technology. They present as abstract, reflective, and bright. Both are meant to resemble a seascape. Coding Description: I tried out this piece two ways and could not decide which I liked better. The first one uses ggcorrplot which is a library that I found while googling cool ggplot types. Usually the specified portion of the graph represents correlation of variable lined up along the x and y axis. I was drawn to this because the plot already sizes the circles based on correlation strength so I thought it would create interesting art. I made the second peice due to the limitations of ggcorrplot. Using geom tile allowed for many more specifications such as using the fill gradient and adding an alpha factor."
  },
  {
    "objectID": "Posts/05_04_25_Lab1/index.html",
    "href": "Posts/05_04_25_Lab1/index.html",
    "title": "Lab 1",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggridges)"
  },
  {
    "objectID": "Posts/05_04_25_Lab1/index.html#quarto",
    "href": "Posts/05_04_25_Lab1/index.html#quarto",
    "title": "Lab 1",
    "section": "Quarto",
    "text": "Quarto\nFirst, let’s make sure you know how to use Markdown formatting to style a Quarto document.\n\nMake this text bold.\nMake this text italicized.\nMake these into a bullet point list:\n\nApples Bananas *Potatoes\n\nEdit the YAML to remove warning messages from being output in the rendered HTML file\nUsing code chunk options, make it so this chunk shows the plot but not the source code:\n\n\n\n\n\n\n\n\n\n\n\nUsing code chunk options, remove the messages about bandwidth geom_density_ridges() chose to use:\n\n\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n\n\n\n\n\n\n\n\n\nUsing code chunk options, make it so that these plots are printed side-by-side:\n\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_boxplot() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\nggplot(data = mpg, \n       mapping = aes(y = manufacturer, x = hwy)) + \n  geom_density_ridges() +\n  labs(x = \"\",\n       y = \"\", \n       title = \"Highway Milage (mpg) for Different Car Manufacturers\"\n       )\n\nPicking joint bandwidth of 1.31\n\n\n\n\n\n\n\n\n\n\n\n\nUsing code chunk options, make it so this chunk shows the code but not the output:\n\n\n2 + 2\n\n\nUsing code chunk options, make it so the file can still knit even though this chunk has an error\n\n\n2 + a\n\nError: object 'a' not found\n\n\n\nUsing code chunk options, create a descriptive label for each of the code chunks above."
  },
  {
    "objectID": "Posts/05_04_25_Lab1/index.html#data-wrangling-review",
    "href": "Posts/05_04_25_Lab1/index.html#data-wrangling-review",
    "title": "Lab 1",
    "section": "Data Wrangling Review",
    "text": "Data Wrangling Review\nSince you’ve already seen some ggplots, let’s do a bit of review on data handling. In this class, we will exclusively make use of tools from the tidyverse suite of packages to perform our data cleaning and wrangling operations. If you are less familiar with these packages or it’s been some time since you used them, I would strongly recommend referencing the function documentation!\nFor these problems, we will continue to work with the mpg data frame, making various changes to the data to clean it up.\n\nThe fl variable describes the type of fuel for each car, with levels: p, r, e, d, and c. Do some research into what each of these labels mean! Then, use the if_else() function to create a new variable (fuel_type) with two levels: petrol (any car using petrolium-based gas) and alternative energy (any car not using petrolium-based gas).\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\nmpg$fl\n\n  [1] \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\"\n [19] \"r\" \"e\" \"r\" \"r\" \"r\" \"p\" \"p\" \"p\" \"p\" \"p\" \"r\" \"e\" \"r\" \"d\" \"r\" \"r\" \"r\" \"r\"\n [37] \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"e\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\"\n [55] \"e\" \"r\" \"r\" \"r\" \"r\" \"e\" \"r\" \"r\" \"r\" \"r\" \"r\" \"e\" \"r\" \"r\" \"r\" \"e\" \"r\" \"r\"\n [73] \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\"\n [91] \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"p\" \"r\" \"r\" \"r\" \"p\" \"r\" \"r\" \"r\" \"c\" \"p\"\n[109] \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"d\" \"r\" \"r\" \"r\"\n[127] \"e\" \"r\" \"r\" \"p\" \"p\" \"r\" \"r\" \"p\" \"r\" \"p\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\"\n[145] \"r\" \"p\" \"p\" \"r\" \"r\" \"p\" \"r\" \"r\" \"p\" \"p\" \"r\" \"p\" \"r\" \"r\" \"p\" \"r\" \"r\" \"r\"\n[163] \"p\" \"r\" \"p\" \"r\" \"r\" \"r\" \"r\" \"p\" \"r\" \"p\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\"\n[181] \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\"\n[199] \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"r\" \"p\" \"p\" \"r\" \"d\" \"r\" \"r\" \"p\"\n[217] \"p\" \"r\" \"r\" \"r\" \"r\" \"d\" \"d\" \"r\" \"r\" \"r\" \"r\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\" \"p\"\n\nmpg |&gt;\n  mutate(fuel_type = if_else(\n    fl == \"p\",\n    \"petrol\",\n    \"alternative energy\"))\n\n# A tibble: 234 × 12\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n# ℹ 1 more variable: fuel_type &lt;chr&gt;\n\n\n\nThe drv variable describes if the car has front drive (f), rear drive (r), or four wheel drive (4). Let’s make better labels for these values! Specifically, use the case_when() function to change the drv varible to have the following levels: front, rear, four wheel.\n\n\nmpg |&gt;\n  mutate(drv = case_when(\n    drv == \"f\" ~ \"front\",\n    drv == \"r\" ~ \"rear\",\n    drv == \"4\" ~ \"four wheel\"\n  ))\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… front    18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… front    21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… front    20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… front    21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… front    16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… front    18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… front    18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… four…    18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… four…    16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… four…    20    28 p     comp…\n# ℹ 224 more rows\n\n\n(string split + remove extra “)” ) 13. The trans variable contains two pieces of information, (1) the transmission style (auto or manual) and the specific type of transmission (e.g., l5, m5). Using the str_split() function, create a new variable (trans_type) containing the specific type of transmission of each car. Once you’ve made this new variable, use the rename() function to change the name of the trans column to trans_style.\nHint: You will need to deal with the stray parenthesis!\n\nmpg |&gt; \n  mutate(\n    trans_split = str_split(trans, \"\\\\(\", n = 2),  \n    trans = map_chr(trans_split, 1),  \n    trans_type = map_chr(trans_split, ~str_remove(.[2], \"\\\\)\")) \n  ) |&gt;\n  select(-trans_split) |&gt;\n  rename(trans_style = trans)\n\n# A tibble: 234 × 12\n   manufacturer model      displ  year   cyl trans_style drv     cty   hwy fl   \n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto        f        18    29 p    \n 2 audi         a4           1.8  1999     4 manual      f        21    29 p    \n 3 audi         a4           2    2008     4 manual      f        20    31 p    \n 4 audi         a4           2    2008     4 auto        f        21    30 p    \n 5 audi         a4           2.8  1999     6 auto        f        16    26 p    \n 6 audi         a4           2.8  1999     6 manual      f        18    26 p    \n 7 audi         a4           3.1  2008     6 auto        f        18    27 p    \n 8 audi         a4 quattro   1.8  1999     4 manual      4        18    26 p    \n 9 audi         a4 quattro   1.8  1999     4 auto        4        16    25 p    \n10 audi         a4 quattro   2    2008     4 manual      4        20    28 p    \n# ℹ 224 more rows\n# ℹ 2 more variables: class &lt;chr&gt;, trans_type &lt;chr&gt;"
  },
  {
    "objectID": "Posts/05_04_25_Lab1/index.html#getting-to-know-your-classmates",
    "href": "Posts/05_04_25_Lab1/index.html#getting-to-know-your-classmates",
    "title": "Lab 1",
    "section": "Getting to know your classmates",
    "text": "Getting to know your classmates\n\nFind someone who took Stat 331 from a different professor than you. Compare your experiences. Tell me their name and professor. List one or two things that you think you learned more about, and one or two things that they learned more about.\n\nI talked to Lucas who took 331 with Dr.Lund. A major difference between our classes was that his class did not use markdown or quarto for their assignments. His class also focused more on regression and statistical analysis n r than data wrangling, visualization, and function writing.\n\nFind someone in the class who does not share your birth month. Tell me their name and birthday, and use R to find out how many days apart your birthdays are.\n\n\nlibrary(lubridate)\nstart_date &lt;- ymd(\"2024-08-30\")\nend_date &lt;- ymd(\"2024-09-22\")\n\nend_date - start_date\n\nTime difference of 23 days\n\n\nZach’s birthday is August 30th. Mine is September 22nd. There are 23 days between our birthdays."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]